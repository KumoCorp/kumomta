searchState.loadedDescShard("cidr_map", 0, "“any” network containing all IPv4 and IPv6 addresses\nRepresents either an IPv4 or an IPv6 network or “any”.\nInner node with two direct children.\nInner node\n<code>Cidr</code> type representing either an IPv4 or an IPv6 network\nIterate over tree\nLeaf nodes represent prefixes part of the set\nLeaf node\nNodes of a CidrMap can be either an InnerNode (with two …\nIPv4 network\nIPv4 network\nIPv6 network\nIPv6 network\ncheck whether an address is contained in the network\ncheck whether an address is contained in the network\nIP family of the contained address (<code>Ipv4</code> or <code>Ipv6</code>).\nIP family of the contained address (<code>Ipv4</code> or <code>Ipv6</code>).\nfirst address in the network\nfirst address in the network\nfirst address in the network as plain address\nfirst address in the network as plain address\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[(T,V); N]</code> into a <code>CidrSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into a <code>CidrSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a new prefix =&gt; value mapping.  (Partially) overwrites …\nAdd a new prefix =&gt; value mapping.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether representing any address\nwhether network represents a single host address\nwhether network represents a single host address\nWhether representing an IPv4 network\nWhether representing an IPv4 network\nWhether representing an IPv6 network\nWhether representing an IPv6 network\nIterate over all values in the map\nIterate over all addresses in the range.  With IPv6 …\nThe longest shared prefix of all nodes in this sub tree.\nlast address in the network\nlast address in the network\nlast address in the network as plain address\nlast address in the network as plain address\nnetwork mask: an pseudo address which has the first …\nnetwork mask: an pseudo address which has the first …\nlength in bits of the shared prefix of the contained …\nlength in bits of the shared prefix of the contained …\nnew iterator\nCreate new network from address and prefix length.  If the …\nCreate new network from address and prefix length.  If the …\nCreate a network containing a single address (network …\nCreate a network containing a single address (network …\nThe underlying AnyIpCidr::from_str parser is very strict …\nRead-only access to the tree.")