searchState.loadedDescShard("rfc5321", 0, "Returns the command(s) string suitable for passing into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIssue a series of commands, and return the responses to …\nSetting this to true causes 8BITMIME and SMTPUTF8 checks …\nAttempt TLS handshake. Returns Err for IO errors. On …\nExtracts the object=name pairs of the subject name from a …\nIf the error contents were likely caused by something …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute theoretical maximum lifetime of a connection when …\nCompute theoretical maximum lifetime of a single message …\nIf the error contents were likely caused by something …\nEnd-of-input\nTimeouts for reading the response\nTimeouts for writing the request\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProduce a TlsConnector for this set of TlsOptions. We need …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptionally clone a TcpStream that represents the same …")