searchState.loadedDescShard("kumo_template", 0, "CompiledTemplates is useful when you have a set of …\nRepresents template errors.\nRepresents a handle to a template.\nHolds a set of templates\nThe undefined value.\nRepresents a dynamically typed value in the template …\nDefine a global value that can be reference by all …\nAdd a named template with the specified source. If name …\nReturns the bytes of this value if they exist.\nIf this is an i64 return it\nIf the value is an object a reference to it is returned.\nIf the value is a string, return it.\nIf this is an usize return it\nBorrows dependent.\nBorrows owner.\nCalls the value directly.\nCalls a method on the value.\nCreates a template context from keys and values or merging …\nReturns the error detail\nHelper function that renders all known debug info on …\nLike <code>downcast_object_ref</code> but returns the actual object.\nReturns some reference to the boxed object if it is of …\nEvaluates the template into a <code>State</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a value from a byte vector.\nLike <code>from_object</code> but for type erased dynamic objects.\nCreates a callable value from a function.\nCreates a value from a dynamic object.\nCreates a value from a safe string.\nCreates a value from something that can be serialized.\nLooks up an attribute by attribute name.\nLooks up an item (or attribute) by key.\nLooks up an index of the value.\nGet a reference to a named template\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns the the owner.\nReturns true if the number is a real integer.\nReturns <code>true</code> if the map represents keyword arguments.\nReturns <code>true</code> if this value is none.\nReturns <code>true</code> if the value is a number.\nReturns <code>true</code> if this value is safe.\nIs this value considered true?\nReturns <code>true</code> if this value is undefined.\nReturns the error kind\nReturns the kind of the value.\nReturns the length of the contained value.\nReturns the line number where the error occurred.\nCreates a value that is an iterable.\nCreates an iterable that iterates over the given value.\nCreates an object projection onto a map.\nCreates a value from a one-shot iterator.\nReturns the filename of the template that caused the error.\nReturns the name of the template.\nConstructs a new self-referential struct.\nCreates a new error with kind and detail.\nCreates an empty <code>State</code> for this template.\nReturns the byte range of where the error occurred if …\nRenders the template into a string.\nLike <code>render</code> but also return the evaluated <code>State</code>.\nRenders the template into an <code>io::Write</code>.\nReturns a reversed view of this value.\nReturns the source code of the template.\nReturns the template source if available.\nIf the value is a string, return it.\nIterates over the value.\nConstructs a new self-referential struct or returns an …\nConstructs a new self-referential struct or returns an …\nReturns a set of all undeclared variables in the template.\nCalls given closure <code>func</code> with a shared reference to …\nCalls given closure <code>func</code> with an unique reference to …\nAttaches another error as source to this error.")