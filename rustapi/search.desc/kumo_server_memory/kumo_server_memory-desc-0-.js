searchState.loadedDescShard("kumo_server_memory", 0, "This module contains logic to reason about memory usage, …\nRepresents a constraint on memory usage\nRepresents the current memory usage of this process\n<code>stats.active</code> Total number of bytes in active pages …\nstats.allocated` - Total number of bytes allocated by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the amount of headroom; the number of bytes that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true when we are within 10% if the soft limit\nstats.mapped (size_t) r- [–enable-stats] Total number of …\nIndicates the overall memory status\nstats.metadata (size_t) r- [–enable-stats] Total number …\nTo be called when a thread goes idle; it will flush cached …\nstats.resident (size_t) r- [–enable-stats] Maximum …\nstats.retained (size_t) r- [–enable-stats] Total number …\nInitialize the memory thread to monitor memory usage/limits\nReturns a receiver that will notify when memory status …\nNumber of bytes allocated via the global allocator. Not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")