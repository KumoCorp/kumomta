(function() {
    var type_impls = Object.fromEntries([["kumo_prometheus",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-CounterRegistry%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#199-205\">Source</a><a href=\"#impl-Clone-for-CounterRegistry%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V: <a class=\"trait\" href=\"kumo_prometheus/trait.AtomicCounterEntry.html\" title=\"trait kumo_prometheus::AtomicCounterEntry\">AtomicCounterEntry</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"kumo_prometheus/struct.CounterRegistry.html\" title=\"struct kumo_prometheus::CounterRegistry\">CounterRegistry</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#200-204\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","kumo_prometheus::PruningCounterRegistry"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CounterRegistry%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#207-235\">Source</a><a href=\"#impl-CounterRegistry%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + <a class=\"trait\" href=\"kumo_prometheus/labels/trait.MetricLabel.html\" title=\"trait kumo_prometheus::labels::MetricLabel\">MetricLabel</a> + 'static, V: <a class=\"trait\" href=\"kumo_prometheus/trait.AtomicCounterEntry.html\" title=\"trait kumo_prometheus::AtomicCounterEntry\">AtomicCounterEntry</a> + 'static&gt; <a class=\"struct\" href=\"kumo_prometheus/struct.CounterRegistry.html\" title=\"struct kumo_prometheus::CounterRegistry\">CounterRegistry</a>&lt;K, V&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.register\" class=\"method\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#212-214\">Source</a><h4 class=\"code-header\">pub fn <a href=\"kumo_prometheus/struct.CounterRegistry.html#tymethod.register\" class=\"fn\">register</a>(name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>, help: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Register a set of Counters, values that are only allowed\nto increment.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register_gauge\" class=\"method\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#217-219\">Source</a><h4 class=\"code-header\">pub fn <a href=\"kumo_prometheus/struct.CounterRegistry.html#tymethod.register_gauge\" class=\"fn\">register_gauge</a>(name: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>, help: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Register a set of Gauges, values that are allowed to increase and decrease.</p>\n</div></details></div></details>",0,"kumo_prometheus::PruningCounterRegistry"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CounterRegistry%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#237-281\">Source</a><a href=\"#impl-CounterRegistry%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"struct\" href=\"kumo_prometheus/struct.CounterRegistry.html\" title=\"struct kumo_prometheus::CounterRegistry\">CounterRegistry</a>&lt;K, V&gt;<div class=\"where\">where\n    V: <a class=\"trait\" href=\"kumo_prometheus/trait.AtomicCounterEntry.html\" title=\"trait kumo_prometheus::AtomicCounterEntry\">AtomicCounterEntry</a>,\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"kumo_prometheus/labels/trait.MetricLabel.html\" title=\"trait kumo_prometheus::labels::MetricLabel\">MetricLabel</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#244-251\">Source</a><h4 class=\"code-header\">pub fn <a href=\"kumo_prometheus/struct.CounterRegistry.html#tymethod.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"kumo_prometheus/struct.AtomicCounter.html\" title=\"struct kumo_prometheus::AtomicCounter\">AtomicCounter</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Resolve an already-existing counter for the given key, or None\nif there either has never been such a value, or if it was pruned.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_create\" class=\"method\"><a class=\"src rightside\" href=\"src/kumo_prometheus/lib.rs.html#255-280\">Source</a><h4 class=\"code-header\">pub fn <a href=\"kumo_prometheus/struct.CounterRegistry.html#tymethod.get_or_create\" class=\"fn\">get_or_create</a>&lt;'a, Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a Q</a>) -&gt; <a class=\"struct\" href=\"kumo_prometheus/struct.AtomicCounter.html\" title=\"struct kumo_prometheus::AtomicCounter\">AtomicCounter</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;'a Q</a>&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Resolve an already-existing counter for the given key, creating\na new one if it didn’t already exist, or was previously pruned.</p>\n</div></details></div></details>",0,"kumo_prometheus::PruningCounterRegistry"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[9419]}